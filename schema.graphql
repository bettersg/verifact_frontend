schema {
  query: Query
  mutation: Mutation
}

input AnswerCreateInput {
  answer: String!
  text: String!
  questionId: ID!
  citationUrls: [Url!]
  clientMutationId: String
}

type AnswerCreatePayload {
  answer: AnswerNode
  clientMutationId: String
}

type AnswerNode implements Node {
  id: ID!
  createdAt: DateTime!
  answer: String!
  text: String!
  question: QuestionNode!
  user: UserType!
  votes(offset: Int, before: String, after: String, first: Int, last: Int): VoteNodeConnection!
  citations(before: String, after: String, first: Int, last: Int): CitationConnection
}

type AnswerNodeConnection {
  pageInfo: PageInfo!
  edges: [AnswerNodeEdge]!
}

type AnswerNodeEdge {
  node: AnswerNode
  cursor: String!
}

type CitationConnection {
  pageInfo: PageInfo!
  edges: [CitationEdge]!
}

type CitationEdge {
  node: CitationNode
  cursor: String!
}

type CitationNode implements Node {
  id: ID!
  createdAt: DateTime!
  user: UserType!
  url: String!
  title: String!
  imageUrl: String!
  contentPk: Int!
}

type CitationNodeConnection {
  pageInfo: PageInfo!
  edges: [CitationNodeEdge]!
}

type CitationNodeEdge {
  node: CitationNode
  cursor: String!
}

scalar DateTime

scalar Email

scalar GenericScalar

type Mutation {
  questionCreate(input: QuestionCreateInput!): QuestionCreatePayload
  answerCreate(input: AnswerCreateInput!): AnswerCreatePayload
  voteCreateUpdateDelete(input: VoteCreateUpdateDeleteInput!): VoteCreateUpdateDeletePayload
  userCreate(input: UserCreateInput!): UserCreatePayload
  userUpdate(input: UserUpdateInput!): UserUpdatePayload
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
}

interface Node {
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

type ObtainJSONWebTokenPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  questions(before: String, after: String, first: Int, last: Int): QuestionConnection
  node(id: ID!): Node
  viewer: UserType
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
}

input QuestionCreateInput {
  text: String!
  citationUrls: [Url!]
  clientMutationId: String
}

type QuestionCreatePayload {
  question: QuestionNode
  clientMutationId: String
}

type QuestionEdge {
  node: QuestionNode
  cursor: String!
}

type QuestionNode implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  user: UserType!
  answers(offset: Int, before: String, after: String, first: Int, last: Int): AnswerNodeConnection!
  citations(before: String, after: String, first: Int, last: Int): CitationConnection
}

type QuestionNodeConnection {
  pageInfo: PageInfo!
  edges: [QuestionNodeEdge]!
}

type QuestionNodeEdge {
  node: QuestionNode
  cursor: String!
}

input RefreshInput {
  token: String
  clientMutationId: String
}

type RefreshPayload {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  clientMutationId: String
  token: String!
}

scalar Url

input UserCreateInput {
  username: String!
  email: Email!
  password: String!
  clientMutationId: String
}

type UserCreatePayload {
  user: UserType
  clientMutationId: String
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  citations(offset: Int, before: String, after: String, first: Int, last: Int): CitationNodeConnection!
  questions(offset: Int, before: String, after: String, first: Int, last: Int): QuestionNodeConnection!
  answers(offset: Int, before: String, after: String, first: Int, last: Int): AnswerNodeConnection!
  votes(offset: Int, before: String, after: String, first: Int, last: Int): VoteNodeConnection!
}

input UserUpdateInput {
  username: String
  email: Email
  clientMutationId: String
}

type UserUpdatePayload {
  user: UserType
  clientMutationId: String
}

input VerifyInput {
  token: String
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar!
  clientMutationId: String
}

input VoteCreateUpdateDeleteInput {
  credible: Boolean
  answerId: ID!
  clientMutationId: String
}

type VoteCreateUpdateDeletePayload {
  vote: VoteNode
  clientMutationId: String
}

type VoteNode implements Node {
  id: ID!
  createdAt: DateTime!
  user: UserType!
  answer: AnswerNode!
  credible: Boolean!
}

type VoteNodeConnection {
  pageInfo: PageInfo!
  edges: [VoteNodeEdge]!
}

type VoteNodeEdge {
  node: VoteNode
  cursor: String!
}
